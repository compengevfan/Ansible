---
# tasks file for ConfigureWindows
- name: Make sure ServerName is all upper
  set_fact: ServerNameUpper="{{ ServerName | upper }}"
  when: ServerNameUpper is not defined

- name: Get VM Info
  include_role:
    name: GitGetVmInfo
  vars:
    ServerName: "{{ ServerName }}"
  when: VmFileContents_JSON is not defined

- name: Get Config Info
  include_role:
    name: GitConfigInfo
  vars:
    Config: "{{ VmFileContents_JSON.VMInfo.Network }}"
  when: ConfigFileContents_JSON is not defined

- name: Obtain Credentials
  include_role:
    name: GetVaultCreds
  vars:
    includecred:
      - windowslocaladmin
      - evoriginda

- name: Add server to configure to temp inventory
  add_host:
    name: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"
    groups: windowsconfigure
    ansible_user: "{{ windowslocaladmin_cred.username }}"
    ansible_password: "{{ windowslocaladmin_cred.password }}"
    ansible_connection: winrm
    ansible_port: 5985
    ansible_winrm_transport: ntlm
  no_log: true

- name: Set timezone
  win_shell: |
    $TimeZone = Get-TimeZone
    if ($TimeZone.Id -ne "Eastern Standard Time") {
      Write-Output "Setting Time Zone to EST."
      Set-TimeZone -Id "Eastern Standard Time"
    }
    else { Write-Output "TimeZone already set to EST." }
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Set execution policy
  win_shell: |
    $ExecPolicy = Get-ExecutionPolicy
    if ($Execpolicy -ne "Unrestricted") {
      Write-Output "Setting Execution Policy to Unrestricted."
      Set-ExecutionPolicy -ExecutionPolicy Undefined -Scope LocalMachine -Force
    }
    else { Write-Output "Execution Policy already set to Unrestricted." }
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install Chocolatey
  win_shell: |
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Reboot after installing Chocolatey
  win_reboot:
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install git
  win_shell: choco install git.install -y
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install Notepad++
  win_shell: choco install notepadplusplus -y
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install Brave
  win_shell: choco install brave -y
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install WinSCP
  win_shell: choco install winscp.install -y
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install VS Code
  win_shell: choco install vscode -y
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install PowerShell 7
  block:
  - name: Get the latest PowerShell 7 release info from GitHub
    uri:
      url: "https://api.github.com/repos/PowerShell/PowerShell/releases/latest"
      method: GET
      return_content: yes
      status_code: 200
    register: release_info

  - name: Extract MSI download URL from release info
    set_fact:
      msi_url: "{{ release_info.json.assets | selectattr('name', 'match', '.*win-x64.msi$') | map(attribute='browser_download_url') | list | first }}"

  - name: Make sure destination dir exists
    win_file:
      path: "C:\\Temp"
      state: directory
    delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

  - name: Download latest PowerShell 7 MSI
    win_get_url:
      url: "{{ msi_url }}"
      dest: C:\Temp\PowerShell-7-latest.msi
    delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

  - name: Install PowerShell 7
    win_package:
      path: C:\Temp\PowerShell-7-latest.msi
      arguments: /quiet /norestart
      state: present
    register: pwsh_install
    delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

  - name: Remove MSI installer file
    win_file:
      path: C:\Temp\PowerShell-7-latest.msi
      state: absent
    when: pwsh_install is changed
    delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Reboot after installing software
  win_reboot:
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Download my PowerShell repo
  shell: "git clone https://github.com/compengevfan/PowerShell.git C:\\Temp\\PowerShell"
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: PowerShell Config
  block:
  - name: Install modules
    win_shell: |
      Install-Module Posh-SSH -Scope AllUsers -Force
      Install-Module VMware.PowerCLI -Scope AllUsers -Force -AllowClobber
    delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

  - name: Install DupreeFunctions
    win_shell: |
      $DfVersion = (Get-Module -ListAvailable -FullyQualifiedName C:\Temp\PowerShell\DupreeFunctions).Version.ToString()
      New-Item -Path "C:\Program Files\WindowsPowerShell\Modules" -Name DupreeFunctions -ItemType Directory -Force
      Copy-Item -Path C:\Temp\PowerShell\DupreeFunctions -Destination "C:\Program Files\WindowsPowerShell\Modules\DupreeFunctions\$DfVersion" -Recurse
      Remove-Item C:\Temp\PowerShell -Recurse -Force -Confirm:$false
    delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"