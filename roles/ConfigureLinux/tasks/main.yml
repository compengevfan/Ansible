---
# tasks file for ConfigureLinux
- name: Make sure ServerName is all upper
  set_fact: ServerNameUpper="{{ ServerName | upper }}"
  when: ServerNameUpper is not defined

- name: Get VM Info
  include_role:
    name: GitGetVmInfo
  vars:
    ServerName: "{{ ServerName }}"
  when: VmFileContents_JSON is not defined

- name: Get Config Info
  include_role:
    name: GitConfigInfo
  vars:
    Config: "{{ VmFileContents_JSON.VMInfo.Network }}"
  when: ConfigFileContents_JSON is not defined

- name: Obtain Credentials
  include_role:
    name: GetVaultCreds
  vars:
    includecred:
      - linuxroot

- name: Add server to configure to temp inventory
  add_host:
    name: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"
    groups: linuxconfigure
    ansible_user: "{{ linuxroot_cred.username }}"
    ansible_password: "{{ linuxroot_cred.password }}"
  no_log: true

- name: Update all currently installed packages
  shell: dnf update -y
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Add Microsoft RH repo
  shell: |
    curl -sSL -O https://packages.microsoft.com/config/rhel/9/packages-microsoft-prod.rpm
    rpm -i packages-microsoft-prod.rpm
    rm packages-microsoft-prod.rpm
    dnf update
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install packages
  dnf: 
    name:
      - git
      - powershell
    state: latest
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install PowerShell Modules
  shell: |
    Install-Module Posh-SSH -Scope AllUsers -Force
    Install-Module VMware.PowerCLI -Scope AllUsers -Force -AllowClobber
  args:
    executable: /usr/bin/pwsh
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Check for DupreeFunctions
  shell: |
    Get-Module DupreeFunctions -ListAvailable
  args:
    executable: /usr/bin/pwsh
  register: df_check
  failed_when: false
  delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

- name: Install DupreeFunctions if not found
  block:
  - name: Download my PowerShell repo
    git:
      repo: https://github.com/compengevfan/PowerShell.git
      dest: /tmp/PowerShell
    delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"

  - name: Install DupreeFunctions
    shell: |
      $DfVersion = (Get-Module -ListAvailable -FullyQualifiedName /tmp/PowerShell/DupreeFunctions).Version.ToString()
      New-Item -Path /usr/local/share/powershell/Modules -Name DupreeFunctions -ItemType Directory -Force
      Copy-Item -Path /tmp/PowerShell/DupreeFunctions -Destination /usr/local/share/powershell/Modules/DupreeFunctions/$DfVersion -Recurse
      Remove-Item /tmp/PowerShell -Recurse -Force -Confirm:$false
    args:
      executable: /usr/bin/pwsh
    delegate_to: "{{ ServerNameUpper }}.{{ ConfigFileContents_JSON.Domain }}"
  when: df_check.rc != 0