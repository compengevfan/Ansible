---
# tasks file for BuildVM
- name: Obtain Credentials
  include_role:
    name: GetVaultCreds
  vars:
    includecred:
      - netbox
      - vcenter

- name: Get VM Info
  include_role:
    name: GitGetVmInfo
  vars:
    ServerName: "{{ ServerName }}"
  when: VmFileContents_JSON is not defined

- name: Get Config Info
  include_role:
    name: GitConfigInfo
  vars:
    Config: "{{ VmFileContents_JSON.VMInfo.Network }}"
  when: ConfigFileContents_JSON is not defined

# - name: Show me the contents
#   debug:
#     msg: "{{ netbox_cred }}"

- name: Make sure ServerName is all upper
  set_fact: ServerNameUpper="{{ ServerName | upper }}"

- name: Get VM Info from Netbox API
  ansible.builtin.uri:
    url: "{{ netbox_cred.url }}/api/virtualization/virtual-machines?name={{ ServerNameUpper }}"
    headers:
      Content-Type: application/json
      Authorization: "{{ netbox_cred.api_token }}"
    validate_certs: no
  register: vmInfo

- name: Get Template Name API
  ansible.builtin.uri:
    url: "{{ netbox_cred.url }}/api/dcim/platforms/{{ vmInfo.json.results[0].platform.id }}/"
    headers:
      Content-Type: application/json
      Authorization: "{{ netbox_cred.api_token }}"
    validate_certs: no
  register: platform

- name: Get Prefix API
  ansible.builtin.uri:
    url: "{{ netbox_cred.url }}/api/ipam/prefixes?contains={{ vmInfo.json.results[0].primary_ip.address.split('/')[0] }}"
    headers:
      Content-Type: application/json
      Authorization: "{{ netbox_cred.api_token }}"
    validate_certs: no
  register: prefix

- name: Get Subnet from API output
  script: Subnet.py {{ vmInfo.json.results[0].primary_ip.address.split('/')[1] }}
  args: 
    executable: /usr/bin/python
  register: subnetReturn
  delegate_to: localhost

- name: Clone a virtual machine from Windows template and customize
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_cred.servername }}"
    username: "{{ vcenter_cred.username }}"
    password: "{{ vcenter_cred.password }}"
    validate_certs: no
    datacenter: DC1
    cluster: "{{ ConfigFileContents_JSON.Cluster }}"
    name: "{{ ServerNameUpper }}"
    template: "{{ platform.json.custom_fields.VM_Template }}"
    state: poweredoff
    folder: /EvOrigin/Workers
    datastore: "{{ vmInfo.json.results[0].custom_fields.Datastore }}"
    hardware:
      num_cpus: "{{ vmInfo.json.results[0].vcpus | int }}"
      memory_mb: "{{ vmInfo.json.results[0].memory | int }}"
    networks:
      - name: "{{ ConfigFileContents_JSON.PortGroup }}"
        ip: "{{ vmInfo.json.results[0].primary_ip.address.split('/')[0] }}"
        netmask: "{{ subnetReturn.stdout_lines[0] }}"
        gateway: "{{ ConfigFileContents_JSON.Gateway }}"
    customization:
      dns_servers:
        - "{{ ConfigFileContents_JSON.DNS1 }}"
        - "{{ ConfigFileContents_JSON.DNS2 }}"
  delegate_to: localhost
  when: platform.json.name is search("Windows")

- name:  Clone a virtual machine from Linux template
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_cred.servername }}"
    username: "{{ vcenter_cred.username }}"
    password: "{{ vcenter_cred.password }}"
    validate_certs: no
    datacenter: DC1
    cluster: "{{ ConfigFileContents_JSON.Cluster }}"
    state: poweredoff
    folder: /EvOrigin/Workers
    template: "{{ platform.json.custom_fields.VM_Template }}"
    name: "{{ ServerNameUpper }}"
    datastore: "{{ vmInfo.json.results[0].custom_fields.Datastore }}"
    hardware:
      num_cpus: "{{ vmInfo.json.results[0].vcpus | int }}"
      memory_mb: "{{ vmInfo.json.results[0].memory | int }}"
    networks:
      - name: "{{ ConfigFileContents_JSON.PortGroup }}"
        ip: "{{ vmInfo.json.results[0].primary_ip.address.split('/')[0] }}"
        netmask: "{{ subnetReturn.stdout_lines[0] }}"
        gateway: "{{ ConfigFileContents_JSON.Gateway }}"
        domain: "{{ ConfigFileContents_JSON.Domain }}"
        dns_servers:
          - "{{ ConfigFileContents_JSON.DNS1 }}"
          - "{{ ConfigFileContents_JSON.DNS2 }}"
    customization:
      autologon: false
      dns_servers:
        - "{{ ConfigFileContents_JSON.DNS1 }}"
        - "{{ ConfigFileContents_JSON.DNS2 }}"
      dns_suffix:
        - "{{ ConfigFileContents_JSON.Domain }}"
  when: not platform.json.name is search("Windows")

- name: Set network adaper to connect at power on
  community.vmware.vmware_guest_network:
    hostname: "{{ vcenter_cred.servername }}"
    username: "{{ vcenter_cred.username }}"
    password: "{{ vcenter_cred.password }}"
    validate_certs: no
    datacenter: DC1
    name: "{{ ServerNameUpper }}"
    label: Network adapter 1
    state: present
    start_connected: true

- name:  Customize and power on the new VM (Linux)
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_cred.servername }}"
    username: "{{ vcenter_cred.username }}"
    password: "{{ vcenter_cred.password }}"
    validate_certs: no
    datacenter: DC1
    cluster: "{{ vmInfo.json.results[0].cluster.name }}"
    name: "{{ ServerNameUpper }}"
    state: poweredon
    customization:
      script_text: |
        #!/bin/bash
        touch /tmp/touch-from-playbook
  when: not platform.json.name is search("Windows")

- name:  Customize and power on the new VM (Windows)
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_cred.servername }}"
    username: "{{ vcenter_cred.username }}"
    password: "{{ vcenter_cred.password }}"
    validate_certs: no
    datacenter: DC1
    cluster: "{{ vmInfo.json.results[0].cluster.name }}"
    name: "{{ ServerNameUpper }}"
    state: poweredon
    customization:
      runonce:
      - powershell.exe -ExecutionPolicy Unrestricted -File C:\Windows\Temp\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP
  when: platform.json.name is search("Windows")

- name: Wait a bit for customization
  pause:
    minutes: 5

- name: Configure Linux VM
  include_role:
    name: ConfigureLinux
  when: not platform.json.name is search("Windows")

- name: Upgrade VMware tools (Windows)
  community.vmware.vmware_guest_tools_upgrade:
    hostname: "{{ vcenter_cred.servername }}"
    username: "{{ vcenter_cred.username }}"
    password: "{{ vcenter_cred.password }}"
    validate_certs: no
    datacenter: DC1
    name: "{{ ServerNameUpper }}"
  when: platform.json.name is search("Windows")

# - name: Configure Windows VM
#   include_role:
#     name: ConfigureLinux
#   when: platform.json.name is search("Windows")